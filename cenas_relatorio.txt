
-Não usámos o vetor unidimensional do professor para tirar a necessidade das funções "linearConv" e "getBoardPlaceStr" visto que se estas não forem 
postas como "inline" pelo compilador, a maneira do prof acaba por ser menos eficiente (pq fazer matriz[][] ou matrizz[i*dim + j] é essencialmente
a mesma coisa) aceder a elementos .Usando [j][i] ou [j * 4 + i] corresponde aos mesmos cálculos em assembly, logo, usámos uma matriz 
dim por dim para guardar as posições do board.

-Retirámos o int play1[2] porque já existe as mesmas coordenadas xy em resp.play1 e para ver se estamos na segunda ou primeira jogada, adicionámos um char n_play
(q só tem 1byte face aos 2*4bytes de int play1[2])

-Para escolhermos a cor, fizemos de uma maneira já predefinida para n ter a necessidade de crirar uma cor random e dps ir verificar se essa cor já foi escolhida

- Usamos a flag is_up para restringirmos a região critica a uma variável de 1byte e de modo a região crítica ser também de baixo nível

- //Sempre que um jogador se desconecta, metemos o node correspondente da lista de jogadores no final de modo a ter sempre a lista de jogadores ordenada de acordo com o state

- //Passamos um ponteiro como argumento para o handler de cada cliente pq a thread de cada clietne precisa de saber para além do respetivo sock_fd, o seu node na lista de jogadores (para depois fazer o swap se se disconectar para manter a lista ordenada)

- Cores: Dá para fazer 11 ciclos ate G chegar a 245, cada ciclo dá 6 cores. E ainda dá mais uma cor pq ainda dá para somar o R (R fica 250 < 255), logo, 
    dá para fazer 6*11 +1 = 67 cores.

- Na com, n aprendos a resolver diferentes tamanhos de int em máquinas diferentes (i.e. no servidor sizeof(int) = 4 e no cliente sizeof(int) = 8) mas resolvemos o problema
do little end e big end, no entanto, mas metemos o htonl e ntohl

- Decidimos remover jogadores que se desconectaram de modo a ter sermpre recursos disponiveis

- Explicar como fizemos para aquando o CTRL+C meter todas as threads a libertarem tudo

- Não ha risco de deadlocks pois não há nenhuns 2 excertos de código em que uma thread tente por ex:
lock(A)
lock(B)

e outra thread a tentar:
lock(B)
lock(A)

E como o único sítio em que temos uma thread com 2 locks ao mesmo tempo é no deleteNode(), não temos o risco de deadlocks

- Não é garantido considerar que globa_variable = ... é atomico porque isso depende de máquina para máquina e queremos assegurar a flexibilidade em termos de máquina para o servidor




/*********************************PERGUNTAR*****************************************/
-Servidor: Precisamos do (struct sockaddr*)&client_addr (preenchido no accept)?
    Ya, pq há OS que precisam disso senão a socket pode não funfar

- Como enviar um vetor de inteiros numa socket?
    Envia-se normalmente, só há problemas com o diferente tamanho de inteiros em diferentes maquinas quando tou a mandar estruturas

- Temos que usar htonl() no envio e ntohl() qd se recebe?
    Nem por isso, usar o memcpy() é a melhor maneira

- Podemos fazer assim sem alocar memoria e sem fazer memcpy() https://stackoverflow.com/questions/9140409/transfer-integer-over-a-socket-in-c?
    Usar o memcpy() é mm a melhor maneira

- read() vs recv()?
    Usar read() quando n quero usar as flags do recv

- Para ter os timers, fazer inicialmente para cada cliente que se conecta 2 threads, uma para timer?
    Tenho que exprimentar para ver se dá para fazer a comunicacao inter-threads com sinais

- Tenho que fazer void* no handler de threads?
    Ya

- Posso ter aqueles dois timers para quando erro numa combinacao? um timer no servidor e um sleep no cliente?
    Nao é preciso, basta um sleep na thread respetiva do cliente

- De acordo com a minha arquitetura, como fazer o broadcast inicial do estado do board atual a um novo jogador?
    É so preciso enviar os pares que estão locked, portanto podemos fazer um vetor, já que sabemos o número max de pares que podem ser feitos

- Como fazer o timer de 5s?
    poll()

- sleep(2)
    Fazer com um timestamp, quando o jogador errar na combinacao, ver a jogada e verificar se o timestamp já passou os 2s

- Tenho de guardar os nós de todos os jogadores disconectados? Consigo apagar um nó da lista dos players (sempre que um player se disconecta) sem tornar a lista inteira numa região critica?
    Depende bué do ambiente em que o programa vai correr (muitos jogadores, etc): Se houver poucos jjogadores, a melhor maneira é ter locks para cada elementos
Mas se houver muitos elementos, tar sempre a ganhar locks e fazer unlock, é dispendioso, logo mais vale bloquear a lista toda. Mas também há a maneira de apenas
meter a head da lista com região crítica e nnc remover elementos, simplesmente quando um jogador se disconecta mete-se uma flag a 0. Assim não há região crítica
mas dps sempre que se fizer sweep vai haver leituras desnecessárias.

- Para fazer a sync do is_up, o melhor a fazer é mutex em todos os elementos do board?
    Ya claro

- O que fazer quando um cliente se disconecta, e ao mesmo tempo está uma outra thread a tentar enviar-lhe o broadcast?
    Pode ser o SIGPIPE  ignore

- Qual a topologia do projeto?
    É server-client, mas n é a maneira clássica

- Synchronization (on the server and client)? Porque é que também é preciso no client?
    Não n é preciso.

- Tenho que fazer p_thread join no final?
    Fazer detach

- No broadcast inicial, tenho que mandar as cartas UP (que estão para cima e que nao estao locked)?
    Sim, tenho que guardar o dono (cor) da peça no board

- Tenho que verificar retorno de pthread_mutex_lock, unlock, sem_post, sem_wait, mutex_destroy?
    Ver o que cada funcao retorna

- pthread_mutex_lock(&common_data->mutex_timer);  common_data->resp.code = 0;  pthread_mutex_unlock(&common_data->mutex_timer);, é uma race condition?
    Ya, pq n sao operacoes atómicas

- Cena do poll()
    Recv e poll() têm de estar na mesma thread

- Quando mando um inteiro, n tenho de me preocupar com aquela cenad o little end e isso?
    Ya deviamos

- Não tenho que declarar os inteiros como unit32_t antes de mandar pela socket?
    Nesta cadeira n temos que tratar disso

- COmo desligar servidor?
    Progamar o ctrl + C

- Quando um cliente se conectou e ja foi antingido o num_max de players, ele pode começar a jogar imediatamente que haja 1 vaga ou posso cagar nele?
    Fechar a conexão imediatamente a seguir

- Checkar o initSocket() 

- Tenho que fazer sync no end_flag?

- É na boa ter uma thread a mexer em variáveis do stack de outra thread né?

- A main thread é demasiado rápida e acaba o processo antes das outras threads mandarem free nas cenas

/*********************************TO_DO*****************************************/
-DONE||Verificar dim tem q ser par e menor que (26?)
-DONE||Descobrir onde é preciso Synchronization para além do is_up
-DONE||Meter os clientes disconectados no cu da lista de modo a quando queremos fazer updateboard n termos que varrer a lista toda (ela vai tar ordenada de acordo com o state dos players)
-DONE||Meter um jogador em espera quando tá a jgoar e todos os players bazam
-DONE||Qd so ha um jogador, o server é que descarda as jogadas desse jogador
-DONE||Limitar o numero de jogadores (por causa das cores) constantemente, sempre que um jogador se conecta
-DONE||Fazer proteções (tipo verificar dim dos (x,y) recebidos pelo cliente)
-DONE||Fazer bot
-DONE||Programar CTRL+C do servidor
-DONE||Fazer reset do jogo
-DONE||Quem ganha
-DONE||Ver se temos de checkar o valor de retorno de mutex lock e unlock
-DONE||Proteger sem_post a uma thread que acabou de bazar
-Meter cenas AF_INET
-Resolver erros valgrind
-Tirar os detach
-Meter bot a receber
-Dizer a todos os clientes que o jogo acabou


VALGRIND-----------------
valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt ./server 4
